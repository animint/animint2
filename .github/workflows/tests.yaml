name: Test Suite
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  r-tests:
    runs-on: ubuntu-latest
    name: R coverage tests
    env:
      TEST_SUITE: R_coverage
      GITHUB_PAT: ${{ secrets.PAT_GITHUB }}
      GH_ACTION: "ENABLED"
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: install and update texlive
        run: /usr/bin/sudo DEBIAN_FRONTEND=noninteractive apt update -y -qq
      - run: /usr/bin/sudo DEBIAN_FRONTEND=noninteractive apt install tidy texlive texlive-fonts-extra -y
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-r-dependencies@v2

      - name: install package
        run: R CMD INSTALL .

      - name: git config user.name
        run: git config --global user.name "GitHub Actions"

      - name: git config user.email
        run: git config --global user.email toby.hocking@r-project.org

      - name: Run R tests and write lcov
        run: |
          echo "Generating R test coverage lcov file"
          Rscript -e "if (!requireNamespace('covr', quietly=TRUE)) install.packages('covr'); library(covr); cov <- covr::package_coverage(path='.', type='tests'); covr::to_cobertura(cov, file='r-coverage.xml')"

      - name: Normalize R coverage paths
        run: |
          echo "Normalizing paths in r-coverage.xml"
          if [ -f "r-coverage.xml" ]; then
            # Set sources to repo root so filenames (which are repo-relative) resolve correctly
            perl -0777 -pe "s|<sources>.*?</sources>|<sources><source>.</source></sources>|s" -i r-coverage.xml || true
            # Normalize any backslashes that might appear in attributes
            sed -i 's|\\\\|/|g' r-coverage.xml || true
            echo "First 20 lines of r-coverage.xml:" && head -n 20 r-coverage.xml || true
          else
            echo "r-coverage.xml not found" >&2
          fi
      - name: Upload R coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: r-coverage
          path: r-coverage.xml

  js-tests:
    runs-on: ubuntu-latest
    name: JS coverage tests
    env:
      TEST_SUITE: JS_coverage
      GITHUB_PAT: ${{ secrets.PAT_GITHUB }}
      GH_ACTION: "ENABLED"
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: install and update texlive
        run: /usr/bin/sudo DEBIAN_FRONTEND=noninteractive apt update -y -qq
      - run: /usr/bin/sudo DEBIAN_FRONTEND=noninteractive apt install tidy texlive texlive-fonts-extra -y
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-r-dependencies@v2

      - name: install package
        run: R CMD INSTALL .

      - name: git config user.name 
        run: git config --global user.name "GitHub Actions"

      - name: git config user.email
        run: git config --global user.email toby.hocking@r-project.org

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Node.js dependencies
        run: |
          npm install v8-to-istanbul
          echo "Node modules installed"
      - name: Run JS tests (R + JS coverage collection)
        run: |
          echo "Running testthat with JS coverage collection..."
          Rscript -e "source('tests/testthat.R', chdir = TRUE)"

      - name: Convert JS coverage to Istanbul format
        run: |
          if [ -f "tests/testthat/js-coverage.json" ]; then
            echo "Converting JS coverage to Istanbul format..."
            node v8-to-istanbul.js
          else
            echo "No JS coverage file found"
            exit 1
          fi

      - name: Normalize JS coverage paths
        run: |
          echo "Normalizing JS coverage paths in coverage-istanbul.json"
          if [ -f "coverage-istanbul.json" ]; then
            node -e "const fs=require('fs'), path=require('path'); const gw=process.env.GITHUB_WORKSPACE||process.cwd(); const repoName=path.basename(gw); const p='coverage-istanbul.json'; const cov=JSON.parse(fs.readFileSync(p)); const out={}; Object.keys(cov).forEach(k=>{ let nk=k; if(typeof nk!=='string') nk=String(nk); nk=nk.replace(/^file:\/\/+/, ''); nk=nk.replace(/\\\\/g, '/'); // strip any path up to repoName
              nk = nk.replace(/^\.\//, ''); nk = nk.replace(/^\//, ''); // remove leading 'repoName/' if present
              if(nk.startsWith(repoName + '/')) nk = nk.slice(repoName.length + 1);
              // strip any path up to '/repoName/' occurrences
              nk = nk.replace(new RegExp('^.*/' + repoName + '/'), ''); nk = nk.replace(new RegExp('^.*/home/runner/work/[^/]*/[^/]*/'), ''); nk = nk.replace(/^\//, ''); out[nk]=cov[k]; }); fs.writeFileSync(p, JSON.stringify(out)); console.log('normalized keys:', Object.keys(out).slice(0,5));"
          else
            echo "coverage-istanbul.json not found" >&2
          fi

      - name: Upload JS coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: js-coverage
          path: coverage-istanbul.json

  CRAN:
    runs-on: ubuntu-latest
    name: CRAN checks
    env:
      TEST_SUITE: CRAN
      GITHUB_PAT: ${{ secrets.PAT_GITHUB }}
      GH_ACTION: "ENABLED"
    steps:
      - uses: actions/checkout@v3
      - name: install and update texlive
        run: /usr/bin/sudo DEBIAN_FRONTEND=noninteractive apt update -y -qq
      - run: /usr/bin/sudo DEBIAN_FRONTEND=noninteractive apt install tidy texlive texlive-fonts-extra -y
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-r-dependencies@v2

      - name: install package
        run: R CMD INSTALL .

      - name: git config user.name
        run: git config --global user.name "GitHub Actions"

      - name: git config user.email
        run: git config --global user.email toby.hocking@r-project.org

      - name: run CRAN build
        run: bash build.sh

  upload-coverage:
    runs-on: ubuntu-latest
    name: Upload combined coverage to Codecov
    needs: [r-tests, js-tests]
    if: always()
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Download R coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: r-coverage
          path: ./artifacts

      - name: Download JS coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: js-coverage
          path: ./artifacts

      - name: Show downloaded files
        run: ls -la artifacts || true

      - name: Debug coverage artifacts (sizes & sample paths)
        run: |
          echo "Artifacts list:"
          ls -la artifacts || true
          echo
          echo "Disk usage:"; du -h artifacts || true

          if [ -f "artifacts/r-coverage.xml" ]; then
            echo "\n---- r-coverage.xml (first 120 lines) ----"
            head -n 120 artifacts/r-coverage.xml || true
            echo "\n---- r-coverage.xml sample filenames ----"
            grep -oP 'filename="[^\"]+"' artifacts/r-coverage.xml | sed -E 's/filename="(.*)"/\1/' | head -n 50 || true
          elif [ -f "artifacts/r-coverage.lcov" ]; then
            echo "\n---- r-coverage.lcov (first 120 lines) ----"
            head -n 120 artifacts/r-coverage.lcov || true
            echo "\n---- r-coverage.lcov sample SF entries ----"
            grep -oP '^SF:.*' artifacts/r-coverage.lcov | sed 's|^SF:||' | head -n 50 || true
          else
            echo "No R coverage artifact found to inspect" >&2
          fi

          if [ -f "artifacts/coverage-istanbul.json" ]; then
            echo "\n---- coverage-istanbul.json size and sample keys ----"
            python3 -c "import json; j=json.load(open('artifacts/coverage-istanbul.json')); keys=list(j.keys()); print('entries:', len(keys)); print('\n'.join(keys[:40]))"
          else
            echo "No JS coverage artifact found to inspect" >&2
          fi

      - name: Upload combined coverage to Codecov
        run: |
          echo "Preparing to upload combined coverage"
          R_COV=""
          if [ -f "artifacts/r-coverage.xml" ]; then
            R_COV=artifacts/r-coverage.xml
          elif [ -f "artifacts/r-coverage.lcov" ]; then
            R_COV=artifacts/r-coverage.lcov
          fi
          JS_COV=artifacts/coverage-istanbul.json

          if [ -z "$R_COV" ] || [ ! -f "$JS_COV" ]; then
            echo "Missing one or both coverage files: R=$R_COV JS=$JS_COV" >&2
            ls -la artifacts || true
            exit 1
          fi

          echo "Uploading both files: $R_COV and $JS_COV"
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          echo "Running Codecov uploader and saving output to codecov.log"
          ./codecov -f "$R_COV" -f "$JS_COV" -t $CODECOV_TOKEN > codecov.log 2>&1 || true
          echo "Uploader exit code: $?"
          echo "--- codecov.log (first 400 lines) ---"
          sed -n '1,400p' codecov.log || true
