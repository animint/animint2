# Hello! If you're here, you're probably an animint2 contributor who
# wants to make adjustments to this file. _pkgdown.yml controls a lot of
# things re: the website, most prominently its appearance.

# Part of this file was generated automatically. But most of this file
# was modified by hand. If usethis::use_pkgdown_github_pages() offers to 
# modify this file, you should probably say no unless you know what 
# you're doing. For more details, look at the website_setup.Rmd file. 
# Thanks. :>


# This needs to be here to tell the website what Bootstrap version it
# should use. This also controls the typefaces (fonts) that appear
# on the website.

template:
  bootstrap: 5
  bslib:
    base_font: {google: "Roboto Condensed"}
    heading_font: {google: "Roboto Condensed"}
    code_font: {google: "Roboto Mono"}


# Since each new version of animint2 is the date, the CRAN dates
# are redundant and have been removed.

news:
  cran_dates: false


# Change this if the URL ever changes.

url: https://animint.github.io/animint2/


# This controls the reference page and how the functions are organized.
# If you've developed a new function, you need to add it somewhere here.
# Look at the titles and subtitles and read the description, then decide
# where the new function belongs. My guess is that it belongs somewhere
# in the Interactivity section, but you'd know best.

reference:
- title: "Basics"
  desc: > 
    All the necessities you need to render animints or static data
    visualizations. You begin with `ggplot()` and your data. Add 
    geoms, aesthetics, and other components with `+`. Then make 
    your plot interactive with `animint()`.
- contents:
  - ggplot
  - animint
  - aes
  - +.gganimint
  - ggsave
  - qplot

- title: "Layers"
  desc: >
    Layers determine how a graph looks and consist of the data; either
    a geom, a statistical transformation, or both; aesthetics; and
    possible position adjustments. Graphs may have more than one layer.
    It's possible to use `layer()` to generate layers, but many people
    find it to be prolix. It's convention to instead use a geom or stat 
    function.
- contents:
  - layer

- subtitle: "Geoms"
  desc: >
    Geoms are geometric objects used to determine the kind of data
    visualization you'll be generating. For example, you'd select
    `geom_point()` for a scatterplot and `geom_line()` for a line
    plot.
- contents:
  - starts_with("geom_")
  - update_geom_defaults

- subtitle: "Stats"
  desc: >
    Stats are similar to geoms. They differ only in that they summarize 
    or transform the data in some way.
- contents:
  - starts_with("stat_")
  - update_stat_defaults

- subtitle: "Position Adjustments"
  desc: > 
    Position adjustments are used to stop overlapping geoms from
    overlapping.
- contents:
  - starts_with("position_")

- subtitle: "Annotations"
  desc: >
    Annotations denote reference points or important features in a data 
    visualization. They don't inherit settings from the animint or 
    static data visualization.
- contents:
  - geom_abline
  - starts_with("annotat")
  - borders

- title: "Interactivity"
  desc: >
    Generate animints by first using `ggplot()` and creating a layer.
    Then place the resulting ggplot into `animint()`, which will
    automatically render the plot interactive.
- contents:
  - starts_with("animint")
  - renderAnimint

- subtitle: "Animint Helpers"
  desc: >
    These functions give you more control over your animint or make
    doing things with animints a little more convenient.
- contents:
  - addShowSelectedForLegend
  - addSSandCSasAesthetics
  - starts_with("make")
  - setPlotSizes
  - switch_axes

- subtitle: "Data Manipulation"
  desc: >
    Animints take data, but they also output it. These functions give
    you control over both the data inputted and outputted.
- contents:
  - colsNotToCopy
  - starts_with("get")
  - issueSelectorWarnings
  - merge_recurse
  - newEnvironment
  - parsePlot
  - saveChunks
  - selectSSandCS
  - split_recursive
  - varied.chunk

- title: Coordinates
  desc: > 
    By default, animint2 uses a Cartesian coordinate system. These
    functions allow you to tweak or change the coordinate system your
    data visualization uses.
- contents:
  - starts_with("coord_")

- title: Themes
  desc: > 
    Themes give you broad control over the appearance of everything in 
    the data visualization orthogonal to the data. `theme()` gives you
    control over a single data visualization, while `theme_set()`
    modifies all future visualizations.
- contents:
  - starts_with("theme")
  - starts_with("element_")
  - margin
  - add_theme
  - calc_element
  - rel

- title: "Aesthetics"
  desc: > 
    Aesthetics control how the data are connected to visual aspects of
    a data visualizations. You can use `aes()` to control color, 
    transparency, size, shape, and more.
- contents:
  - starts_with("aes_")
  - update_labels

- subtitle: "Scales"
  desc: > 
    Scales are a subset of aesthetics. These functions control axes, 
    legends, and the like.
- contents:
  - labs
  - lims
  - expand_limits
  - starts_with("scale_")

- subtitle: "Guides"
  desc: > 
    Guides are a subset of scales. These functions give you finer
    control over scales.
- contents:
  - starts_with("guide")

- title: "Facetting"
  desc: > 
    Generate many small graphs for static data visualizations. 
    These don't work for animints.
- contents:
  - starts_with("facet_")

- subtitles: Labels
  desc: > 
    Adjust facet labels.
- contents:
  - starts_with("label")
  - as_labeller

- title: "Helpers"
  desc: >
    Some additional functions that aren't at the core of animint2. Most
    of them are used for convenience or automation.

- subtitle: "Automation"
  desc: > 
    `autoplot()` is used to automate plot production, while the `fortify` 
    functions are used to automate tidying dataframes.
- contents:
  - autoplot
  - starts_with("fortify")
  - map_data

- subtitle: "Extending Animint2"
  desc: > 
    You don't need to stick with just the functions animint2 gives you.
    Use these functions to make your own geoms, stats, and scales.
- contents:
  - matches("print")
  - matches("proto")

- subtitle: "Programming with Animint2"
  desc: > 
    These functions help you program with animint2.
- contents:
  - aes_
  - matches("print")

- subtitle: "Helping Functions"
  desc: > 
    These are convenience functions that may be helpful when making
    data visualizations.
- contents:
  - cut_interval
  - hmisc
  - mean_se
  - pt.to.lines
  - resolution
  - toRGB

- title: "Datasets"
  desc: > 
    animint2 comes with a wide range of datasets. Use them to experiment
    with plot-building and animints.
- contents:
  - breakpoints
  - change
  - ChromHMMiterations
  - climate
  - compare
  - diamonds
  - economics
  - economics_long
  - faithfuld
  - FluView
  - FunctionalPruning
  - generation.loci
  - intreg
  - luv_colours
  - malaria
  - midwest
  - mixtureKNN
  - montreal.bikes
  - mpg
  - msleep
  - PeakConsistency
  - pirates
  - presidential
  - prior
  - prostateLasso
  - seals
  - TestROC
  - txhousing
  - UStornadoes
  - VariantModels
  - vervet
  - WorldBank
  - worldPop

- title: "Testing"
  desc: >
    Some functions that may be useful for debugging.
- contents:
  - starts_with("check")
  - starts_with("is.")


# Any functions filed under internal are not displayed on the website.
# Place all non-public-facing functions here.

- title: internal
  contents:
  - graphical-units
  - last_plot
  - transform_shape
  - translate_qplot_ggplot
  - translate_qplot_lattice
  - update_gallery

